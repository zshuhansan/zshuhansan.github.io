{"pages":[],"posts":[{"title":"介绍一下自己，还有这个博客","text":"先自我介绍下我是北航的在读本科生，空间科学专业，做了个标签让介绍更直观一点 这个博客的搭建技术路线这个博客的框架是hexo,跑在我自己的树莓派上，部署方式是nginx，目前用的是花生壳做内网穿透。唯一的缺点就是我是用内网在往树莓派上传东西，正在寻找比较好的SSH解决方案。 这个博客写点什么技术比如之前做的宝可梦大作业,包括了信息爬取，面向对象以及可视化的;以及本站的建站过程，我都会进行分享，同时可能会写一些数据结构还有计原计网的学习笔记之类(挖坑) 游戏我是个游戏食性很杂的人，什么游戏都玩一点，但是都挺菜的….本站后续可能出点游戏推荐和游戏评价啥的欢迎加我steam!好友代码：1063979847 硬件因为我是台式+笔记本+树莓派的组合,最近虚拟货币又在涨，所以本站有可能出现一些换拆机/装新机的帖,同时我可能会分享一些多端同步文件的内容。","link":"/2021/08/27/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E5%B7%B1%EF%BC%8C%E8%BF%98%E6%9C%89%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"title":"使用hexo创建博客并部署到GitPages&#x2F;树莓派上(坑)","text":"前言搭建这个博客着实费了些时间和精力，踩了不少坑，这篇博文用来记录我的搭建过程，以期记录，也让读者能够少走弯路，避免网上一堆灌水垃圾的误导…项目最后的实现效果也不错，我在两台Win PC上都可以编辑我的博客并即时更新到我的仓库，且外网能正常访问我的博客 基本的技术路线网站框架: Hexo部署仓库: GitPages和我自己的树莓派服务器部署: Nginx内网穿透: 目前是花生壳 实现过程Hexo在Win PC上的安装和基础配置安装依赖项和Hexo本体 Git项目依赖于Git做部署，需要提前下载好。下载地址: https://gitforwindows.org安装就直点确定就好检查Git是否安装完成:命令行输入git --version输出和图差不多就行 Node.JsNode.Js是hexo的依赖项，也需要提前下载并安装下载地址: https://node.js.org/en/download/检查类似Git,输入node -v Hexonodejs还给了我们npm这么个包管理工具，我们可以直接用npm安装hexo，打开命令行，输入npm install -g hexo-cli即可安装，输入hexo -v检查版本确认是否安装成功 初始化和简单配置仍然是打开命令行，我们来初始化我们的本地博客。输入d:转到d盘(其他哪个盘都行)，然后输入hexo init 放博客的文件夹名字，等待初始化完成即可。完成后文件夹应该长这样然后cd 文件夹名字，先后输入hexo clean 和hexo s，你就可以在 http://localhost:4000/ 看到一个最初始的博客界面了，它长这个样子 写一篇博文将博客部署到GitPages上Github仓库建立修改部署设置将博客部署到树莓派上Git公钥的生成树莓派上Nginx的配置用花生壳进行内网穿透","link":"/2021/10/01/%E4%BD%BF%E7%94%A8hexo%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Gitpages-%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A/"},{"title":"用py做一个简易的宝可梦作战系统(坑)","text":"项目介绍这个项目是我大一下学期《大学计算机基础》的结课大作业选题之一，要求…. 这篇博文将实现过程分为如下的几个部分 数据爬取 面向对象的对象设计 对战界面设计(前端) 对战计算设计(后端) 数据爬取 爬虫技术路线由于第一到第八世代宝可梦共800余只，爬取信息条目数量较少，所以我使用了比较基础的requests+BeautifulSoup4+re组合，进行宝可梦信息爬取和提取，配合OS和Numpy进行保存。 爬虫爬取信息确定 既然是要做战斗系统，那么就需要考虑宝可梦的属性，攻防数值，技能列表以及技能的各项属性。而经验值和进化的问题由于各世代有些微差异，该项目将不会涉及。处于以上思考，我将爬取分成了以下两个部分。1.宝可梦信息爬取:内容包括宝可梦名称、头像、攻防和血量属性(最小值和最大值)、技能列表。 2.宝可梦技能信息爬取:内容包括技能属性、PP、伤害上下限以及技能附带的特殊效果(用正则表达式进行匹配) 爬虫实现Whenever我们使用爬虫，都应该先检查网站robots协议，经检查协议为空，那么我们就可以开始我们的信息爬取了。我的两只爬虫大致思路都相同: 1.try-except模式下先链接每只宝可梦/每个技能网页并获取内容，失败时在终端打印”xx宝可梦/技能爬取失败” 1234567891011121314userkv={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36', 'accept-language':'zh-CN,zh;q=0.9' }#这一部分是我们打开网页时向网页表明身份的键值对。 #一些服务器会自动拒绝掉爬虫的http请求，所以我们要对爬虫做一些伪装。 #我们可以在浏览器中打开网页，F12后在Network中找到页面条目，在其中找到requests-headers项目（如图），替换即可。def getHTMLText(url): try: r=requests.get(url,timeout=30,headers=userkv) r.raise_for_status()#链接出错时会抛出一个错误跳转到except r.encoding='utf-8'#确定编码方式为utf-8 return r.text#返回网页HTML内容 except: return '' 2.得到网页内容后按照正则表达式匹配以及网页html标签的排列规律，提取信息并存取 爬取宝可梦信息首先我们进入宝可梦图鉴，F12检查页面属性 在宝可梦名称所在标签有对应的宝可梦页面链接后缀，直接进行访问即可。而在每个宝可梦的单独页面中，可以通过正则表达式匹配标签对应的注释，判断如: if (表达式) in 标签.attrs，找到标签特点即可 爬取宝可梦技能信息宝可梦的技能列表爬取就更简单了，直接在招式图鉴里把信息录下即可。 爬取结果展示宝可梦基础信息技能基础信息 面向对象面向对象是为了对战调用信息更加完善，主要分为单个宝可梦及其技能以及整个背包的设计，主要还是通过py的列表(即哈希表)来实现。同时在初始化前需要读取之前保存的数据。 单个宝可梦的面向对象特简单，我放个代码段。 1234567891011121314151617181920212223242526272829303132pokemen_path='D:/OneDrive/python垃圾代码/基于requests获得宝可梦信息/pokemen.xlsx'all_pokemen=pd.read_excel(pokemen_path)all_pokemen.set_index('name',inplace=True)all_pokemen.to_excel(pokemen_path)def dice(ran):#在已知能力值区间内取出随机值 min=int(ran.split(' - ')[0]) max=int(ran.split(' - ')[1]) if min &lt;max:ret=np.random.randint(min,max) else:ret=min return retclass Pokemen(): def __init__(self,pokemen,skill): #pokemen是Dataframe,skill是技能名列表 self.name=pokemen.name self.attr=pokemen['attr'] self.hp=dice(pokemen['HP']) self.f_hp=self.hp self.atk=dice(pokemen['攻击']) self.defense=dice(pokemen['防御']) self.s_atk=dice(pokemen['特攻']) self.s_defense=dice(pokemen['特防']) self.speed=dice(pokemen['速度']) self.skill={} self.neg=''#宝可梦的负面状态 for i in skill: try: self.skill[i]=Skill(all_skill.loc[i]) except: print('\\n%s技能初始化失败\\n'%i) print(&quot;%s初始化成功&quot;%self.name) 宝可梦技能还有背包的初始化 类似地，唯一注意的就是要有pp(或其他战斗属性)最大值和战时状态值的区分 未完待续….. py的列表真是好py就是最好的语言！！！","link":"/2021/08/31/%E7%94%A8py%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E5%AE%9D%E5%8F%AF%E6%A2%A6%E4%BD%9C%E6%88%98%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"博客搭建","slug":"博客搭建","link":"/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"面向对象","slug":"面向对象","link":"/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"categories":[]}